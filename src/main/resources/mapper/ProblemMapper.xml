<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kelab.problemcenter.dal.dao.ProblemMapper">

    <resultMap id="BaseResultMap" type="com.kelab.problemcenter.dal.model.ProblemModel">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="LONGVARCHAR"/>
        <result column="input" property="input" jdbcType="LONGVARCHAR"/>
        <result column="output" property="output" jdbcType="LONGVARCHAR"/>
        <result column="sample_input" property="sampleInput" jdbcType="LONGVARCHAR"/>
        <result column="sample_output" property="sampleOutput" jdbcType="LONGVARCHAR"/>
        <result column="hint" property="hint" jdbcType="LONGVARCHAR"/>
        <result column="time_limit" property="timeLimit" jdbcType="INTEGER"/>
        <result column="memory_limit" property="memoryLimit" jdbcType="INTEGER"/>
        <result column="special_judge" property="specialJudge" jdbcType="TINYINT"/>
        <result column="special_judge_source" property="specialJudgeSource" jdbcType="LONGVARCHAR"/>
        <result column="frame_source" property="frameSource" jdbcType="LONGVARCHAR"/>
        <result column="frame_source_compiler_id" property="frameSourceCompilerId" jdbcType="TINYINT"/>
        <result column="source" property="source" jdbcType="LONGVARCHAR"/>
        <result column="status" property="status" jdbcType="TINYINT"/>
        <result column="creator_id" property="creatorId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 只有准确查询的时候才获取所有字段 -->
    <sql id="ALL_COLUMNS">
        `id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`,
         `hint`, `time_limit`, `memory_limit`, `special_judge`, `special_judge_source`,
         `frame_source`, `frame_source_compiler_id`, `source`, `status`, `creator_id`,
         UNIX_TIMESTAMP(`create_time`) * 1000 as `create_time`, UNIX_TIMESTAMP(`modify_time`) * 1000 as `modify_time`
    </sql>


    <select id="queryByIds" resultMap="BaseResultMap">
        select
        <include refid="ALL_COLUMNS"/>
        from `Problem`
        where `id` in
        <foreach collection="ids" item="item"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <sql id="LIMIT_SQL">
        limit ${(query.page - 1) * query.rows}, ${query.rows}
    </sql>

    <select id="queryPage" resultMap="BaseResultMap">
        select
        `pro`.`id`, `pro`.`title`, `pro`.`source`, `pro`.`status`, `pro`.`creator_id`,
        UNIX_TIMESTAMP(`pro`.`create_time`) * 1000 as `create_time`, UNIX_TIMESTAMP(`pro`.`modify_time`) * 1000 as
        `modify_time`
        from `Problem` `pro`
        <if test="query.orderByDifficult == true">
            inner join `Problem_submit_info` `psi` on `pro`.`id` = `psi`.`problem_id`
        </if>
        where
        <if test="query.filterPassReview == true">
            `pro`.`status` = 2
        </if>
        <if test="query.filterPassReview == false">
            `pro`.`status` = 1
        </if>
        <if test="query.title != null and query.title != ''">
            and `pro`.`title` like concat(#{query.title},'%')
        </if>
        <if test="query.source != null and query.source != ''">
            and `pro`.`source` like concat(#{query.source},'%')
        </if>
        <if test="query.ids != null and query.ids.size() != 0">
            and `pro`.`id` in
            <foreach collection="query.ids" item="item"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="query.orderByDifficult == true">
            order by (`psi`.`ac_num`/`psi`.`submit_num`)
        </if>
        <if test="query.orderByDifficult == false and query.orderByTitle == true">
            order by convert(`pro`.`title` using gbk)
        </if>
        <if test="query.orderByDifficult == false and query.orderByTitle == false">
            order by `id`
        </if>
        <include refid="LIMIT_SQL"/>
    </select>

    <select id="queryTotal" resultType="java.lang.Integer">
        select
        count(*)
        from `Problem` `pro`
        where
        <if test="query.filterPassReview == true">
            `pro`.`status` = 2
        </if>
        <if test="query.filterPassReview == false">
            `pro`.`status` = 1
        </if>
        <if test="query.title != null and query.title != ''">
            and `pro`.`title` like concat(#{query.title},'%')
        </if>
        <if test="query.source != null and query.source != ''">
            and `pro`.`source` like concat(#{query.source},'%')
        </if>
        <if test="query.ids != null and query.ids.size() != 0">
            and `pro`.`id` in
            <foreach collection="query.ids" item="item"
                     open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into `Problem`
        (`id`, `title`, `description`, `input`, `output`, `sample_input`, `sample_output`,
         `hint`, `time_limit`, `memory_limit`, `special_judge`, `special_judge_source`,
         `frame_source`, `frame_source_compiler_id`, `source`, `status`, `creator_id`)
         values
         (#{record.id}, #{record.title}, #{record.description}, #{record.input}, #{record.output}, #{record.sampleInput}, #{record.sampleOutput},
          #{record.hint}, #{record.timeLimit}, #{record.memoryLimit}, #{record.specialJudge}, #{record.specialJudgeSource},
          #{record.frameSource}, #{record.frameSourceCompilerId}, #{record.source}, #{record.status}, #{record.creatorId})
    </insert>

    <delete id="delete">
        delete from `Problem`
        where `id` in
        <foreach collection="ids" item="item"
                 open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <update id="update">
        update `Problem`
        <set>
            <if test="record.title != null and record.title != ''">
                `title` = #{record.title},
            </if>
            <if test="record.description != null and record.description != ''">
                `description` = #{record.description},
            </if>
            <if test="record.input != null and record.input != ''">
                `input` = #{record.input},
            </if>
            <if test="record.output != null and record.output != ''">
                `output` = #{record.output},
            </if>
            <if test="record.sampleInput != null and record.sampleInput != ''">
                `sample_input` = #{record.sampleInput},
            </if>
            <if test="record.sampleOutput != null and record.sampleOutput != ''">
               `sample_output` = #{record.sampleOutput},
            </if>
            <if test="record.hint != null and record.hint != ''">
                `hint` = #{record.hint},
            </if>
            <if test="record.timeLimit != null">
                `time_limit` = #{record.timeLimit},
            </if>
            <if test="record.memoryLimit != null">
                `memory_limit` = #{record.memoryLimit},
            </if>
            <if test="record.specialJudge != null">
                `special_judge` = #{record.specialJudge},
            </if>
            <if test="record.specialJudgeSource != null and record.specialJudgeSource != ''">
                `special_judge_source` = #{record.specialJudgeSource},
            </if>
            <if test="record.frameSource != null and record.frameSource != ''">
                `frame_source` = #{record.frameSource},
            </if>
            <if test="record.frameSourceCompilerId != null">
                `frame_source_compiler_id` = #{record.frameSourceCompilerId},
            </if>
            <if test="record.source != null and record.source != ''">
                `source` = #{record.source},
            </if>
            <if test="record.status != null">
                `status` = #{record.status},
            </if>
        </set>
        where `id` = #{record.id}
    </update>

    <select id="querySource" resultType="java.lang.String">
        select `source`
        from `Problem`
        group by `source`
        order by count(*)
        limit #{limit}
    </select>
</mapper>